// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects  Project[]
  projectMembers ProjectMember[]
  assignedTasks Task[] @relation("TaskAssignee")
  createdTasks  Task[] @relation("TaskCreator")
  taskComments TaskComment[]
  taskActivities TaskActivity[]
  timeEntries  TimeEntry[]
  taskAttachments TaskAttachment[]
  notifications Notification[]
  taskTemplates TaskTemplate[]
  searchHistories SearchHistory[]

  @@map("users")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // 关联关系
  projectId   String?
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?
  assignee    User?      @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  creatorId   String
  creator     User       @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  
  // 协作功能
  parentId    String?
  parent      Task?      @relation("SubTasks", fields: [parentId], references: [id], onDelete: Cascade)
  subtasks    Task[]     @relation("SubTasks")
  comments    TaskComment[]
  tags        TaskTag[]
  activities  TaskActivity[]
  
  // Phase 3 高级功能
  predecessors TaskDependency[] @relation("TaskPredecessor")
  successors   TaskDependency[] @relation("TaskSuccessor")
  timeEntries  TimeEntry[]
  attachments  TaskAttachment[]
  notifications Notification[]

  @@map("tasks")
}

model Project {
  id          String      @id @default(cuid())
  name        String      @db.VarChar(100)
  ownerId     String
  visibility  Visibility  @default(PRIVATE)
  description String?
  deadline    DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  owner       User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members     ProjectMember[]
  tasks       Task[]

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      MemberRole @default(VIEWER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId])
  @@map("project_members")
}

// 任务评论
model TaskComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("task_comments")
}

// 任务标签
model TaskTag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String?  // 标签颜色
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  tasks     Task[]
  
  @@map("task_tags")
}

// 任务活动日志
model TaskActivity {
  id        String   @id @default(cuid())
  action    String   // 操作类型：created, updated, status_changed, assigned, commented, etc.
  details   String?  // 操作详情
  oldValue  String?  // 旧值
  newValue  String?  // 新值
  createdAt DateTime @default(now())
  
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("task_activities")
}

// 任务依赖关系
model TaskDependency {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  
  // 依赖关系：predecessor -> successor
  predecessorId String
  predecessor   Task     @relation("TaskPredecessor", fields: [predecessorId], references: [id], onDelete: Cascade)
  successorId   String
  successor     Task     @relation("TaskSuccessor", fields: [successorId], references: [id], onDelete: Cascade)
  
  @@unique([predecessorId, successorId])
  @@map("task_dependencies")
}

// 时间跟踪
model TimeEntry {
  id          String   @id @default(cuid())
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?     // 持续时间（分钟）
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("time_entries")
}

// 文件附件
model TaskAttachment {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  mimeType    String
  size        Int      // 文件大小（字节）
  path        String   // 文件存储路径
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  uploadedBy  String
  uploader    User     @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  
  @@map("task_attachments")
}

// 通知
model Notification {
  id        String   @id @default(cuid())
  title     String
  content   String
  type      NotificationType
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  readAt    DateTime?
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  taskId    String?
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// 任务模板
model TaskTemplate {
  id          String   @id @default(cuid())
  name        String
  description String?
  title       String
  content     String?  // 模板内容（JSON格式）
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@map("task_templates")
}

// 搜索历史
model SearchHistory {
  id        String   @id @default(cuid())
  query     String
  filters   String?  // JSON格式的筛选条件
  createdAt DateTime @default(now())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("search_histories")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Visibility {
  PUBLIC
  PRIVATE
  SPECIFIED
}

enum UserRole {
  ADMIN
  PROJECT_MANAGER
  USER
}

enum MemberRole {
  VIEWER
  COLLABORATOR
  MANAGER
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_UPDATED
  TASK_COMPLETED
  TASK_COMMENTED
  TASK_DUE_SOON
  TASK_OVERDUE
  DEPENDENCY_BLOCKED
  DEPENDENCY_UNBLOCKED
  SYSTEM
}
